====== RUN MONGODB WITH MONGODB COMPASS ========
- Open mongodb compass
- Click on 'Add new connection'
- Give it a name or not (will give default: localhost:27017)
- Create collections and documents as you require
- Proceed with other commands as are below when using mongodb shell

Also note that mongodb shell exists within the compass. You will find 'Open MongoDB Shell' on the top right once you click on a connection (ie localhost:27017)
You can simply use that (which I recommend) or use it via windows cmd


===== 2. RUN A MONGODB =====
- Start mongodb shell by opening cmd
- Type 'mongosh' to enable connection.		(Make sure already installed. Check _installation.txt if not)

-----Clear screen (cls) -------


==== 3. SHOW LIST OF DATABASES =====
> show dbs		(ie admin, config, local)



==== 4. TO USE A DATABASE (or CREATE a database if it does not already exist)  =====
> use admin		(admin already exists)
> use school	(school does not exist previously. Also, will not show up when 'show dbs' because it is empty)



==== 5. CREATE A COLLECTION (table) WITHIN THE DATABASE (school database) =====
> db.createCollection("students")		//Now, show dbs will show school database
> db.createCollection("teachers", {capped:true, size:10000000, max:100}, {autoIndexId:false})  // size-> Max. file size, max-> maximum no. of documents(ie rows).

NB: 'db' is an object that references the currently selected database 

==== 6. VIEW ALL COLLECTIONS (tables) WITHIN A DATABASE ====
      show collections

==== 6b. DROP COLLECTION ====
> db.students.drop()		// Name of collection is students.

==== 7. DROP A DATABASE ====
While within the database (ie use school), 

> db.dropDatabase()   // > show dbs will not show school among the list.


==== 8. INSERTING DOCUMENTS (one at a time) ====
>  use school
>  db.students.insertOne({name:"Spongebob", age:30, gpa:3.2})	//students is the collection(table), if not exist, will create, then insert the data.


==== 9. INSERTING DOCUMENTS (many at a time) ====
> db.students.insertMany([{name:"Kasim", age:45, gpa:4.8},{name:"Moses", age:23, gpa:4.2},{name:"Aaron", age:31, gpa: 3.9}])


==== 10. RETURN DOCUMENTS WITHIN A COLLECTION (table students) / READ COLLECTION DOCUMENTS ====

>  db.students.find()						// Return all documents within the collection. 

NB: This may not return all, 20 documents. This is due to a mongodb design to avoid overwhelming the console with too much data.
    find() returns a cursor object, which is essentially a pointer to the result set of your query. This cursor allows you to iterate over the documents one at a time.
    find() returns a resultset list of cursor of 20 documents each.

    A cursor is a database object that lets you traverse (i.e., iterate through) the records returned by a query.

ITERATING OVER A CURSOR (Option 1: Using .hasNext() and .next()):

let cursor = db.students.find();

while (cursor.hasNext()) {
  let doc = cursor.next();
  printjson(doc);
}

ITERATING OVER A CURSOR (Option 2: Using .forEach()):

db.students.find().forEach(function(doc) {
  printjson(doc);
});

ALT:
	- db.students.find().forEach(printjson)

--- Convert Cursor to Array (if not too large) ---
let allDocs = db.students.find().toArray();
printjson(allDocs);


>  db.students.find().pretty()					// Format the output the output.
>  db.students.find({name:"Spongebob"})				// Return documents containing the name 'Spongebob'. Similar to WHERE clause in SQL.
>  db.students.find({name:"Spongebob", age:30})
>  db.students.find({}, {_id:false, name:true})			// Ruturns only name property for all values, _id by default is true, hence why explicit false.
>  db.students.find({}, {_id:false})				// Ruturns all properties for all values, excluding the _id.
>  db.students.find({},{_id:false, name:true, gpa:true})	// Ruturns all values getting only the name and gpa, _id by default is true, hence why explicit false.
>  db.students.find({},{_id:false, name:true, gpa:true}).sort({name:1}).limit(3)

--- For the above, the format is: .find({query}, {projection})


==== 11 DATA TYPES =====
- String can be either single or double quotes
- Date (ie new Date() //Gives current date & time in UTC time zone. OR new Date("2023-01-02T00:00:00") <- Date & Time specified by user.
- Integers, doubles, booleans, null
- arrays (ie courses: ["Bio", "Chem"]
- Nested documents: (ie address: {stree: "123 Fake St.", city: "Bikini Bottom", zip: 12345}

--- E.g ---
db.students.insertOne({
	name: "Larry",
	age:32, gpa: 2.8,
	fullTime: false, 
	registerDate: new Date(), 
	dateOfBirth: new Date("1990-01-25T04:32:00"), 
	graduationDate: null, 
	courses: ["Biology","Physics", "Calculus"], 
	address: {
		street: "123 Fake Street",
		city: "Bikini Bottom", 
		zip:123456
		}
	})

==== 12. SORT DOCUMENTS ====
> db.students.find().sort({name:1})	//Sort by name in ascending order.
> db.students.find().sort({name:-1})	//Sort by name in descending order.

==== 13. LIMIT ====
> db.students.find().limit(2)				//Returns only the first 2 items based on _id
> db.students.find().sort({age:1}).limit(3)	//


==== 14. UPDATE DOCUMENTS (Update one). NB: The format is: .update(filter, update) ====
NB: Use the 'set' keyword to update or add field. Use the 'unset' to undefine/remove a field.

> db.students.updateOne({name:"Spongebob"}, {$set:{fullTime:true}})	//If fullTime exists, update, else, create.
> db.students.updateOne({_id: ObjectId("643d57295bb37c66993ae9a0")}, {$set:{name:"SpongeBobbbb"}})

> db.students.find({name: "Spongebob"}, {$unset:{fullTime:""})		//Unset; remove the fullTime field.


==== 15. UPDATE MANY ====
> db.students.updateMany({}, {$set:{fullTime:false}})		//Add or update(if field already exists) the value of fullTime for all documents to false.


==== 16. CHECK IF FIELD (column) EXISTS OR NOT  ====
> db.students.updateMany({fullTime:{$exists:false}}, {$set:{fullTime:true}})		//if fullTime field does not exist, setFullTime = true;


===== UNSET A FILED (Removing a field ) =======
> db.students.find({name: "Spongebob"}, {$unset:{fullTime:""})		//Unset; remove the fullTime field.

==== 17. DELETE DOCUMENT ====
> db.students.deleteOne({name:"Larry"})

==== 18. DELETE MANY DOCUMENT (OR EMPTY A COLLECTION) ====
> db.students.deleteMany({fullTime:false})
> db.students.deleteMany({registerDate:{$exists:false}})		//If registerDate field does not exist, delete the document.
> db.students.deleteMany({})						// This empties the collection. (ie truncating a table)



===== 19. COMPARISON OPERATORS ==========
NB: Operators are denoted by the $ sign

- a. Not equal comparison operator -
> db.students.find({name:{$ne:"Spongebob"}})		// Return all documents where name IS NOT EQUAL Spongebob.

- b. Less than & greater than -
> db.students.find({age:{$lt:20}})				// Return all documents where age is less than 20
> db.students.find({age:{$lte:20}})				// Return all documents where age is less than or equal 20

> db.students.find({age:{$gt:20}})				// Return all documents where age is greater than 20
> db.students.find({age:{$gte:20}})				// Return all documents where age is greater than or equal 20

- C. within a certain range -
> db.students.find({gpa:{$gte:3, $lte:4}})		// Return all documents where gpa is less than/equal 3 and greater than/equal 4

- c. In and not in operator -
> db.students.find({name:{$in:["Spongebob","Patrick","Sandy"]}})		// Returns all documents where name is either of the 3 listed in the array
> db.students.find({name:{$nin:["Spongebob","Patrick","Sandy"]}})


===== 20. LOGICAL OPERATORS (AND, OR, NOR, NOT)  ==========
> db.students.find({$and: [{fullTime:true},{age:{$lte:22}}]})		// return where fullTime = true, AND age <= 22
> db.students.find({$or: [{fullTime:true},{age:{$lte:22}}]})		// return where fullTime = true, OR age <= 22
> db.students.find({$Nor: [{fullTime:true},{age:{$lte:22}}]})		// return where fullTime != true, AND age !<= 22
> db.students.find({age:{$not:{$gte:30}}})				// return where age NOT >= 30 


===== 21. INDEXES =======
Indexes support the efficient execution of queries in MongoDB

